import { Writer, Reader } from 'protobufjs/minimal';
export interface WhisperMessage {
    ephemeralKey: Uint8Array;
    counter: number;
    previousCounter: number;
    /**
     *  PushMessageContent
     */
    ciphertext: Uint8Array;
}
export interface PreKeyWhisperMessage {
    registrationId: number;
    preKeyId: number;
    signedPreKeyId: number;
    baseKey: Uint8Array;
    identityKey: Uint8Array;
    /**
     *  WhisperMessage
     */
    message: Uint8Array;
}
export interface KeyExchangeMessage {
    id: number;
    baseKey: Uint8Array;
    ephemeralKey: Uint8Array;
    identityKey: Uint8Array;
    baseKeySignature: Uint8Array;
}
export declare const WhisperMessage: {
    encode(message: WhisperMessage, writer?: Writer): Writer;
    decode(input: Uint8Array | Reader, length?: number | undefined): WhisperMessage;
    fromJSON(object: any): WhisperMessage;
    fromPartial(object: DeepPartial<WhisperMessage>): WhisperMessage;
    toJSON(message: WhisperMessage): unknown;
};
export declare const PreKeyWhisperMessage: {
    encode(message: PreKeyWhisperMessage, writer?: Writer): Writer;
    decode(input: Uint8Array | Reader, length?: number | undefined): PreKeyWhisperMessage;
    fromJSON(object: any): PreKeyWhisperMessage;
    fromPartial(object: DeepPartial<PreKeyWhisperMessage>): PreKeyWhisperMessage;
    toJSON(message: PreKeyWhisperMessage): unknown;
};
export declare const KeyExchangeMessage: {
    encode(message: KeyExchangeMessage, writer?: Writer): Writer;
    decode(input: Uint8Array | Reader, length?: number | undefined): KeyExchangeMessage;
    fromJSON(object: any): KeyExchangeMessage;
    fromPartial(object: DeepPartial<KeyExchangeMessage>): KeyExchangeMessage;
    toJSON(message: KeyExchangeMessage): unknown;
};
declare type Builtin = Date | Function | Uint8Array | string | number | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
