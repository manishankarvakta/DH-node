"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PushMessageContentCompatible = void 0;
/*
 *
 * Copyright (c) 2020 Privacy Research, LLC
 *
 *  Licensed under GPL v3 (https://www.gnu.org/licenses/gpl-3.0.en.html)
 *
 */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/no-non-null-assertion */
const minimal_1 = require("protobufjs/minimal");
const _1 = require(".");
const basePushMessageContent = {};
exports.PushMessageContentCompatible = {
    encode(message, writer = minimal_1.Writer.create()) {
        if (!('body' in message) && !('flags' in message)) {
            throw new Error('Invalid protobuf');
        }
        if (message.body) {
            writer.uint32(10).string(message.body);
        }
        for (const v of message.attachments) {
            _1.PushMessageContent_AttachmentPointer.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.group !== undefined && message.group !== undefined) {
            _1.PushMessageContent_GroupContext.encode(message.group, writer.uint32(26).fork()).ldelim();
        }
        if (message.flags) {
            writer.uint32(32).uint32(message.flags);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new minimal_1.Reader(input) : input;
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, basePushMessageContent);
        message.attachments = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.body = reader.string();
                    break;
                case 2:
                    message.attachments.push(_1.PushMessageContent_AttachmentPointer.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.group = _1.PushMessageContent_GroupContext.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.flags = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, basePushMessageContent);
        message.attachments = [];
        if (object.body !== undefined && object.body !== null) {
            message.body = String(object.body);
        }
        else {
            message.body = object.flags ? undefined : '';
        }
        if (object.attachments !== undefined && object.attachments !== null) {
            for (const e of object.attachments) {
                message.attachments.push(_1.PushMessageContent_AttachmentPointer.fromJSON(e));
            }
        }
        if (object.group !== undefined && object.group !== null) {
            message.group = _1.PushMessageContent_GroupContext.fromJSON(object.group);
        }
        else {
            message.group = undefined;
        }
        if (object.flags !== undefined && object.flags !== null) {
            message.flags = Number(object.flags);
        }
        else {
            message.flags = 0;
        }
        return message;
    },
    fromPartial(object) {
        const message = Object.assign({}, basePushMessageContent);
        message.attachments = [];
        if (object.body !== undefined && object.body !== null) {
            message.body = object.body;
        }
        else {
            message.body = '';
        }
        if (object.attachments !== undefined && object.attachments !== null) {
            for (const e of object.attachments) {
                message.attachments.push(_1.PushMessageContent_AttachmentPointer.fromPartial(e));
            }
        }
        if (object.group !== undefined && object.group !== null) {
            message.group = _1.PushMessageContent_GroupContext.fromPartial(object.group);
        }
        else {
            message.group = undefined;
        }
        if (object.flags !== undefined && object.flags !== null) {
            message.flags = object.flags;
        }
        else {
            message.flags = 0;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        obj.body = message.body || '';
        if (message.attachments) {
            obj.attachments = message.attachments.map((e) => e ? _1.PushMessageContent_AttachmentPointer.toJSON(e) : undefined);
        }
        else {
            obj.attachments = [];
        }
        obj.group = message.group ? _1.PushMessageContent_GroupContext.toJSON(message.group) : undefined;
        obj.flags = message.flags || 0;
        return obj;
    },
};
