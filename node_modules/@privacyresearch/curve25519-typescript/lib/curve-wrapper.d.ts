/// <reference types="emscripten" />
import { KeyPair, Curve, AsyncCurve } from './types';
interface CurveModule extends EmscriptenModule {
    _curve25519_donna(mypublic_ptr: number, secret_ptr: number, basepoint_ptr: number): number;
    _curve25519_sign(signature_ptr: number, privateKey_ptr: number, message_ptr: number, message_len: number): number;
    _curve25519_verify(signature_ptr: number, privateKey_ptr: number, message_ptr: number, message_len: number): number;
}
export declare class Curve25519Wrapper implements Curve {
    static create(): Promise<Curve25519Wrapper>;
    private _module;
    basepoint: Uint8Array;
    constructor(module: CurveModule);
    private _allocate;
    private _readBytes;
    keyPair(privKey: ArrayBuffer): KeyPair;
    sharedSecret(pubKey: ArrayBuffer, privKey: ArrayBuffer): ArrayBuffer;
    sign(privKey: ArrayBuffer, message: ArrayBuffer): ArrayBuffer;
    verify(pubKey: ArrayBuffer, message: ArrayBuffer, sig: ArrayBuffer): boolean;
    /**
     * Syntactic sugar for verify with explicit semantics.  The fact that verify returns true when
     * a signature is invalid could be confusing. The meaning of this function should be clear.
     *
     * @param pubKey
     * @param message
     * @param sig
     */
    signatureIsValid(pubKey: ArrayBuffer, message: ArrayBuffer, sig: ArrayBuffer): boolean;
}
export declare class AsyncCurve25519Wrapper implements AsyncCurve {
    curvePromise: Promise<Curve25519Wrapper>;
    constructor();
    keyPair(privKey: ArrayBuffer): Promise<KeyPair>;
    sharedSecret(pubKey: ArrayBuffer, privKey: ArrayBuffer): Promise<ArrayBuffer>;
    sign(privKey: ArrayBuffer, message: ArrayBuffer): Promise<ArrayBuffer>;
    verify(pubKey: ArrayBuffer, message: ArrayBuffer, sig: ArrayBuffer): Promise<boolean>;
}
export {};
